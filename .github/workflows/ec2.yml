name: AWS-EC2 Instance CD

on:
  workflow_run:
    workflows: ["Node.js CI"]
    types: [completed]
  workflow_dispatch:

jobs:
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials (supports session token)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Send SSM redeploy command
        id: ssm
        env:
          REGION:   ${{ secrets.AWS_REGION }}
          INSTANCE: ${{ secrets.AWS_INSTANCE_ID }}
        run: |
          set -euo pipefail

          # Build a safe commands array (avoids quoting issues)
          PARAMS=$(
            jq -cn '{
              commands: [
                "set -euxo pipefail",
                "echo === whoami && whoami",
                "echo === uname -a && uname -a",
                "echo === PWD && pwd",
                # Ensure docker present (simple path works on Ubuntu Learner Lab AMIs)
                "if ! command -v docker >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y docker.io; fi",
                # Ensure compose present (plugin or classic)
                "if ! docker compose version >/dev/null 2>&1 && ! command -v docker-compose >/dev/null 2>&1; then sudo apt-get install -y docker-compose || true; fi",
                "cd /home/ubuntu",
                "echo === list files && ls -la",
                "(sudo docker compose pull || sudo docker-compose pull)",
                "(sudo docker compose up -d || sudo docker-compose up -d)",
                "sudo docker image prune -af || true",
                "echo === docker ps && sudo docker ps"
              ]
            }'
          )

          CMD_ID=$(aws ssm send-command \
            --region "$REGION" \
            --instance-ids "$INSTANCE" \
            --document-name "AWS-RunShellScript" \
            --comment "Redeploy BookPortal" \
            --parameters "$PARAMS" \
            --query "Command.CommandId" \
            --output text)

          echo "cmd_id=$CMD_ID" >> "$GITHUB_OUTPUT"

      - name: Wait and fetch SSM output (always show logs)
        env:
          REGION:   ${{ secrets.AWS_REGION }}
          INSTANCE: ${{ secrets.AWS_INSTANCE_ID }}
          CMD_ID:   ${{ steps.ssm.outputs.cmd_id }}
        run: |
          set +e
          aws ssm wait command-executed \
            --region "$REGION" \
            --command-id "$CMD_ID" \
            --instance-id "$INSTANCE"
          STATUS=$?

          echo -e "\n=== SSM Invocation Output ==="
          aws ssm get-command-invocation \
            --region "$REGION" \
            --command-id "$CMD_ID" \
            --instance-id "$INSTANCE" \
            --output table \
            --query "{Status:Status, StdOut:StandardOutputContent, StdErr:StandardErrorContent}"

          exit $STATUS
